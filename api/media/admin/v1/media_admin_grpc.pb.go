// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MediaAdminClient is the client API for MediaAdmin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MediaAdminClient interface {
	CreateMedia(ctx context.Context, in *CreateMediaReq, opts ...grpc.CallOption) (*CreateMediaReply, error)
}

type mediaAdminClient struct {
	cc grpc.ClientConnInterface
}

func NewMediaAdminClient(cc grpc.ClientConnInterface) MediaAdminClient {
	return &mediaAdminClient{cc}
}

func (c *mediaAdminClient) CreateMedia(ctx context.Context, in *CreateMediaReq, opts ...grpc.CallOption) (*CreateMediaReply, error) {
	out := new(CreateMediaReply)
	err := c.cc.Invoke(ctx, "/media.admin.v1.MediaAdmin/CreateMedia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MediaAdminServer is the server API for MediaAdmin service.
// All implementations must embed UnimplementedMediaAdminServer
// for forward compatibility
type MediaAdminServer interface {
	CreateMedia(context.Context, *CreateMediaReq) (*CreateMediaReply, error)
	mustEmbedUnimplementedMediaAdminServer()
}

// UnimplementedMediaAdminServer must be embedded to have forward compatible implementations.
type UnimplementedMediaAdminServer struct {
}

func (UnimplementedMediaAdminServer) CreateMedia(context.Context, *CreateMediaReq) (*CreateMediaReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMedia not implemented")
}
func (UnimplementedMediaAdminServer) mustEmbedUnimplementedMediaAdminServer() {}

// UnsafeMediaAdminServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MediaAdminServer will
// result in compilation errors.
type UnsafeMediaAdminServer interface {
	mustEmbedUnimplementedMediaAdminServer()
}

func RegisterMediaAdminServer(s grpc.ServiceRegistrar, srv MediaAdminServer) {
	s.RegisterService(&MediaAdmin_ServiceDesc, srv)
}

func _MediaAdmin_CreateMedia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMediaReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MediaAdminServer).CreateMedia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/media.admin.v1.MediaAdmin/CreateMedia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MediaAdminServer).CreateMedia(ctx, req.(*CreateMediaReq))
	}
	return interceptor(ctx, in, info, handler)
}

// MediaAdmin_ServiceDesc is the grpc.ServiceDesc for MediaAdmin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MediaAdmin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "media.admin.v1.MediaAdmin",
	HandlerType: (*MediaAdminServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMedia",
			Handler:    _MediaAdmin_CreateMedia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/media/admin/v1/media_admin.proto",
}
